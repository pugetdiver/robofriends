{"version":3,"sources":["reducers.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/Header.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","robots","isPending","error","Card","props","name","email","id","className","src","alt","CardList","console","log","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","React","Component","Header","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e7211019.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_PENDING\n} from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    //console.log(action.type);\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state\n    }\n}\n\nconst initialStateRobots = {\n    robots: []\n    ,isPending: false\n    ,error: ''\n}\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n\n}","import React from 'react';\n\nconst Card = (props) => {\nconst {name, email, id} = props\n    return (\n        \n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='Robots' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\n\nconst CardList = ({ robots }) => {\nconsole.log('cardlist')\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    )\n                })\n            }\n        </div>\n    )\n\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    console.log('searchbox')\n    return (\n        <div >\n            <input \n            aria-label='Search Robots'\n            className='pa3 ba b--green bg-lightest-blue'\n             type='search' \n             placeholder='Search Robots'\n             onChange={searchChange} />\n        </div>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '1000px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll","import React from 'react'\n\n\nclass ErrorBoundry extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        const { hasError } = this.state\n        if (hasError) {\n            return <h1>Ooops. That is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry","import React from 'react'\n//import CounterButton from './CounterButton';\n\nclass Header extends React.Component {\n\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    render() {\n        console.log('header')\n        return (\n            <div>\n                {/* <CounterButton color={'red'} /> */}\n                <h1 className='f1'>Robots</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header","import React from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../Components/CardList'\nimport SearchBox from '../Components/SearchBox'\nimport Scroll from '../Components/Scroll'\nimport ErrorBoundry from '../Components/ErrorBoundry'\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions.js'\nimport Header from '../Components/Header'\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n\n    render() {\n\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        return isPending ?\n            <h1>Loading</h1>\n            :\n            (\n                <div className='tc'>\n                    <Header/>\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_PENDING\n}\n    from './constants.js'\n\nexport const setSearchField = (text) => {\n    //console.log(text);\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => {\n            return response.json();\n        })\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { searchRobots, requestRobots } from './reducers'\nimport {createLogger} from 'redux-logger'\nimport thunkMiddleware  from 'redux-thunk'\nimport './index.css';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst store = createStore( rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}